I"Q<h4 id="contents">Contents</h4>
<ul>
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#triggerdagrunoperator의-format과-parameter">TriggerDagRunOperator의 Format과 Parameter</a></li>
  <li><a href="#사용-예제">사용 예제</a></li>
</ul>

<p>본 포스팅은 카테고리 Airflow의  TriggerDagRunOperator에 관하여 정리하였습니다.</p>

<p><br /></p>

<hr />

<h2 id="introudction"><span style="color:navy">Introudction<span></span></span></h2>

<p><a href="https://jhryu1208.github.io/data/2022/02/20/Airflow_ExternalTaskSensor/">지난 포스팅</a>에 이어서 <code class="language-plaintext highlighter-rouge">TriggerDagRunOperator</code>에 대해 알아보고자 한다. <br /> (바로 레고레고 🏃💨💨)</p>

<p><br /></p>

<hr />

<h2 id="triggerdagrunoperator의-format과-parameter"><span style="color:navy">TriggerDagRunOperator의 Format과 Parameter<span></span></span></h2>

<p>아래는 <code class="language-plaintext highlighter-rouge">TriggerDagRunOperator</code>의 기본 포맷과 파라미터에 관해서 보여준다.  나의 경우 Airflow 버전1을 사용하기 때문에 버전1을 초점에 맞추어 내용을 정리하였다. (편의상 Trigger 당하는 외부 Dag를 Slave Dag, 그리고 Trigger을 수행하는 Dag를 Master Dag라고 칭하겠다.)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">task</span> <span class="o">=</span> <span class="n">TriggerDagRunOperator</span><span class="p">(</span><span class="s">'task_name_example'</span><span class="p">,</span>
                             <span class="n">trigger_dag_id</span> <span class="o">=</span> <span class="s">'slave_dag_id'</span><span class="p">,</span>
                             <span class="n">python_callable</span> <span class="o">=</span> <span class="n">tirgger_something_func</span><span class="p">,</span>
                             <span class="n">execution_date</span> <span class="o">=</span> <span class="s">''</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">trigger_dag_id</code> (<em>str</em>)
    <ul>
      <li>trigger할 Slave Dag의 <code class="language-plaintext highlighter-rouge">dag_id</code>를 받는다. 참고로, Slave Dag의 tirgger는 Master Dag가 대신하기 때문에 schedule_interval=None으로 지정해도 괜찮다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">python_callable</code> (<em>python callable</em>)
    <ul>
      <li>Airflow의 XCom과 비슷한 기능을 수행하지만,  XCom의 경우 동일 Dag에 있는 Task끼리만 가능하다. 하지만, 해당 파라미터를 이용할 경우 Master Dag에서 Slave Dag로의 단방향 객체 전달을 진행할 수 있다.</li>
      <li>해당 파리미터에 전달되는 객체는 <code class="language-plaintext highlighter-rouge">context object</code>와 <code class="language-plaintext highlighter-rouge">placeholder object</code>(<code class="language-plaintext highlighter-rouge">obj</code>)를 받는 함수이며, 이 함수는 <code class="language-plaintext highlighter-rouge">obj</code>를 반환해야한다. <code class="language-plaintext highlighter-rouge">obj</code>에는 커스텀할 수 있는 <code class="language-plaintext highlighter-rouge">run_id</code>와 <code class="language-plaintext highlighter-rouge">payload</code>속성이 존재한다.</li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">run_id</code>속성의 경우 Slave Dag Run을 식별할 수 있는 아래와 같은 값인데 직접적으로 트랙킹하기 어려워서 user define으로 값을 주기 위해서는 실제로는 커스텀 함수가 별도로 필요할 것 같다. 나의 경우에는 이용하지 않을 것 같다.</p>

        <p><img src="https://user-images.githubusercontent.com/53929665/154988161-cd5e9331-b611-4a1f-8d35-ac401be5eabe.png" alt="Untitled" /></p>
      </li>
      <li><code class="language-plaintext highlighter-rouge">payload</code>속성은 다른 Dag에 전달할 serialization가능한 <code class="language-plaintext highlighter-rouge">pickable object</code>를 해당 파라미터는 전달 받는다. 그리고 이를 전달 받은 Slave Dag의 Task는 <code class="language-plaintext highlighter-rouge">context object</code>의 <code class="language-plaintext highlighter-rouge">dag_run</code> key의 value의 <code class="language-plaintext highlighter-rouge">conf</code>속성으로 부터 호출할 수 있다. (즉, <code class="language-plaintext highlighter-rouge">context[’dag_run’].conf</code> )</li>
      <li>
        <p>따라서 여기에 전달되는 함수의 기본 포맷은 다음과 같다.</p>

        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">test_func</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span>
          <span class="n">obj</span><span class="p">.</span><span class="n">payload</span> <span class="o">=</span> <span class="p">{</span><span class="s">"key"</span><span class="p">:</span> <span class="s">"value"</span><span class="p">}</span>
          <span class="k">return</span> <span class="n">obj</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">execution_date</code> (<em>str/datetime.datetime</em>)
    <ul>
      <li>Slave Dag의 execution date를 받는다.</li>
      <li>Master Dag가 완료되고 난 뒤에 바로 Slave Dag가 수행되기를 원한다면 고려할 필요는 없다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<hr />

<h2 id="사용-예제"><span style="color:navy">사용 예제<span></span></span></h2>

<p>다음은 slave dag 코드와 slave dag를 tirgger시키는 master dag에 대한 코드이다.</p>

<p>master dag의 dag_id는 <strong>Master_Dag_for_TDR</strong>이라고 지정하였으며, slave dag의 dag_id는 <strong>Slave_Dag_for_TDR</strong>이라고 지정하였다. 더불어, tirgger당하는 slave dag의 경우 <code class="language-plaintext highlighter-rouge">schedule_interval</code>가 <code class="language-plaintext highlighter-rouge">None</code>으로 지정하였다.</p>

<h5 id="-trigger_master_dagpy">&lt;/&gt; trigger_master_dag.py</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">from</span> <span class="nn">airflow.models</span> <span class="kn">import</span> <span class="n">DAG</span>
<span class="kn">from</span> <span class="nn">airflow.operators.dummy_operator</span> <span class="kn">import</span> <span class="n">DummyOperator</span>
<span class="kn">from</span> <span class="nn">airflow.operators.python_operator</span> <span class="kn">import</span> <span class="n">PythonOperator</span>
<span class="kn">from</span> <span class="nn">airflow.operators.dagrun_operator</span> <span class="kn">import</span> <span class="n">TriggerDagRunOperator</span>

<span class="n">default_args</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'owner'</span><span class="p">:</span> <span class="s">'zaid.ryu'</span>
<span class="p">}</span>

<span class="n">dag</span> <span class="o">=</span> <span class="n">DAG</span><span class="p">(</span><span class="s">'Master_Dag_for_TDR'</span><span class="p">,</span>
          <span class="n">description</span> <span class="o">=</span> <span class="s">'Master Dag'</span><span class="p">,</span>
          <span class="n">schedule_interval</span> <span class="o">=</span> <span class="s">'0 17 * * *'</span><span class="p">,</span>
          <span class="n">default_args</span> <span class="o">=</span> <span class="n">default_args</span><span class="p">,</span>
          <span class="n">start_date</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2022</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">19</span><span class="p">),</span>
          <span class="n">catchup</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">trigger_func</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span>
    <span class="n">obj</span><span class="p">.</span><span class="n">payload</span> <span class="o">=</span> <span class="p">{</span><span class="s">'name'</span><span class="p">:</span><span class="s">'Zaid.Ryu'</span><span class="p">,</span>
                   <span class="s">'talk'</span><span class="p">:</span><span class="s">'this is my first code for TriggerDagRunOperator'</span><span class="p">}</span>
    <span class="k">return</span> <span class="n">obj</span>

<span class="k">def</span> <span class="nf">print_ds</span><span class="p">(</span><span class="n">ds</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'ds : </span><span class="si">{</span><span class="n">ds</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>

<span class="n">m_task1</span> <span class="o">=</span> <span class="n">DummyOperator</span><span class="p">(</span><span class="n">task_id</span> <span class="o">=</span> <span class="s">'master_task'</span><span class="p">,</span>
                        <span class="n">dag</span> <span class="o">=</span> <span class="n">dag</span><span class="p">)</span>

<span class="n">m_task2</span> <span class="o">=</span> <span class="n">TriggerDagRunOperator</span><span class="p">(</span><span class="n">task_id</span> <span class="o">=</span> <span class="s">'trigger_slave'</span><span class="p">,</span>
                                <span class="n">trigger_dag_id</span> <span class="o">=</span> <span class="s">'Slave_Dag_for_TDR'</span><span class="p">,</span>
                                <span class="n">python_callable</span> <span class="o">=</span> <span class="n">trigger_func</span><span class="p">,</span>
                                <span class="n">execution_date</span> <span class="o">=</span> <span class="s">""</span><span class="p">,</span>
                                <span class="n">dag</span> <span class="o">=</span> <span class="n">dag</span><span class="p">)</span>

<span class="n">m_task3</span> <span class="o">=</span> <span class="n">PythonOperator</span><span class="p">(</span><span class="n">task_id</span> <span class="o">=</span> <span class="s">'printDS'</span><span class="p">,</span>
                         <span class="n">python_callable</span> <span class="o">=</span> <span class="n">print_ds</span><span class="p">,</span>
                         <span class="n">op_args</span><span class="o">=</span><span class="p">[</span><span class="s">""</span><span class="p">],</span>
                         <span class="n">dag</span> <span class="o">=</span> <span class="n">dag</span><span class="p">)</span>

<span class="n">m_task1</span> <span class="o">&gt;&gt;</span> <span class="n">m_task2</span> <span class="o">&gt;&gt;</span> <span class="n">m_task3</span>
</code></pre></div></div>

<h5 id="-trigger_slave_dagpy">&lt;/&gt; trigger_slave_dag.py</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">from</span> <span class="nn">airflow.models</span> <span class="kn">import</span> <span class="n">DAG</span>
<span class="kn">from</span> <span class="nn">airflow.operators.dummy_operator</span> <span class="kn">import</span> <span class="n">DummyOperator</span>
<span class="kn">from</span> <span class="nn">airflow.operators.python_operator</span> <span class="kn">import</span> <span class="n">PythonOperator</span>

<span class="n">default_args</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'owner'</span><span class="p">:</span> <span class="s">'zaid.ryu'</span>
<span class="p">}</span>

<span class="n">dag</span> <span class="o">=</span> <span class="n">DAG</span><span class="p">(</span><span class="s">'Slave_Dag_for_TDR'</span><span class="p">,</span>
          <span class="n">description</span> <span class="o">=</span> <span class="s">'Slave Dag'</span><span class="p">,</span>
          <span class="n">schedule_interval</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
          <span class="n">default_args</span><span class="o">=</span><span class="n">default_args</span><span class="p">,</span>
          <span class="n">start_date</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2022</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">19</span><span class="p">),</span>
          <span class="n">catchup</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">pirnt_conf</span><span class="p">(</span><span class="o">**</span><span class="n">context</span><span class="p">):</span>
    <span class="n">dag_run</span> <span class="o">=</span> <span class="n">context</span><span class="p">[</span><span class="s">'dag_run'</span><span class="p">].</span><span class="n">conf</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'{name} said </span><span class="se">\"</span><span class="s">{talk}</span><span class="se">\"</span><span class="s">'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="o">**</span><span class="n">dag_run</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">print_ds</span><span class="p">(</span><span class="n">ds</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'ds : </span><span class="si">{</span><span class="n">ds</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>

<span class="n">s_task1</span> <span class="o">=</span> <span class="n">DummyOperator</span><span class="p">(</span><span class="n">task_id</span> <span class="o">=</span> <span class="s">'slave_task'</span><span class="p">,</span>
                        <span class="n">dag</span> <span class="o">=</span> <span class="n">dag</span><span class="p">)</span>

<span class="n">s_task2</span> <span class="o">=</span> <span class="n">PythonOperator</span><span class="p">(</span><span class="n">task_id</span> <span class="o">=</span> <span class="s">'printDagRun'</span><span class="p">,</span>
                         <span class="n">python_callable</span><span class="o">=</span><span class="n">pirnt_conf</span><span class="p">,</span>
                         <span class="n">provide_context</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                         <span class="n">dag</span> <span class="o">=</span> <span class="n">dag</span><span class="p">)</span>

<span class="n">s_task3</span> <span class="o">=</span> <span class="n">PythonOperator</span><span class="p">(</span><span class="n">task_id</span> <span class="o">=</span> <span class="s">'printDS'</span><span class="p">,</span>
                         <span class="n">python_callable</span> <span class="o">=</span> <span class="n">print_ds</span><span class="p">,</span>
                         <span class="n">op_args</span><span class="o">=</span><span class="p">[</span><span class="s">""</span><span class="p">],</span>
                         <span class="n">dag</span> <span class="o">=</span> <span class="n">dag</span><span class="p">)</span>

<span class="n">s_task1</span> <span class="o">&gt;&gt;</span> <span class="n">s_task2</span> <span class="o">&gt;&gt;</span> <span class="n">s_task3</span>
</code></pre></div></div>

<p><br /></p>

<p>그리고 이를 실행했을 때의 dag 관계를 도식화하면 다음과 같을 것이다.</p>

<p><img src="https://user-images.githubusercontent.com/53929665/154988151-994e654b-780e-4cbe-ba48-b329117e98db.png" alt="Untitled 1" /></p>

<p>위의 그림의 직사각형은 Task를 의미하며 줄 선으로 묶어 Dag안에 포함되었음을 표현하였다. 해당 그림을 기준으로 master dag는 실행 중인 상태이며, master_task까지 수행이 완료되었음을 표시하였다. 그리고, 화살표의 경우 tirgger 관계를 표시한다.</p>

<p>해당 그림은 현재 master dag가 run인 상태이며, master_task까지 수행 완료하였음을 확인할 수 있다. 하지만, slave dag는 run 상태에 해당하지 않으며 스케줄업된 상태도 아닌 것을 확인할 수 있다.</p>

<p>이제 master dag의 trigger_slave가 scheduled상태가 된 다음을 확인해보자.</p>

<p><br /></p>

<p><img src="https://user-images.githubusercontent.com/53929665/154988153-4dc4cd3f-6ad3-4a72-bb94-edec409f7439.png" alt="Untitled 2" /></p>

<p>master dag의 trigger_slave가 수행되면서 코드에서 지정한 slave dag가 수행 상태에 진입한 것을 확인하였다. 이때, tirgger_slave의 시작 시간, 종료시간, 그리고 slave dag의 시작 시간을 비교해보면 tirgger_slave가 수행이 끝난 뒤에 slave_dag가 tirgger되는 것이 아니라, trigger_slave가 시작되면서 slave_dag가 수행되는 것임을 확인할 수 있다.</p>

<p><br /></p>

<h5 id="-trigger_master_dagpy의-trigger_func-함수">&lt;/&gt; trigger_master_dag.py의 trigger_func 함수</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">trigger_func</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span>
    <span class="n">obj</span><span class="p">.</span><span class="n">payload</span> <span class="o">=</span> <span class="p">{</span><span class="s">'name'</span><span class="p">:</span><span class="s">'Zaid.Ryu'</span><span class="p">,</span>
                   <span class="s">'talk'</span><span class="p">:</span><span class="s">'this is my first code for TriggerDagRunOperator'</span><span class="p">}</span>
    <span class="k">return</span> <span class="n">obj</span>
</code></pre></div></div>

<h5 id="-trigger_slave_dagpy의-print_conf함수">&lt;/&gt; trigger_slave_dag.py의 print_conf함수</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">print_conf</span><span class="p">(</span><span class="o">**</span><span class="n">context</span><span class="p">):</span>
    <span class="n">dag_run</span> <span class="o">=</span> <span class="n">context</span><span class="p">[</span><span class="s">'dag_run'</span><span class="p">].</span><span class="n">conf</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'{name} said </span><span class="se">\"</span><span class="s">{talk}</span><span class="se">\"</span><span class="s">'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="o">**</span><span class="n">dag_run</span><span class="p">))</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/53929665/154988157-aa9af60a-1740-4486-b1c6-0ce1654351ae.png" alt="Untitled 3" /></p>

<p>그리고,  slave dag의 printDagRun Task의 log에서 trigger_func함수를 통해서 master dag가 slave dag에 보낸 object를 slave dag의 <code class="language-plaintext highlighter-rouge">context obj</code>에서 정상적으로 확인할 수 있었다.</p>

<p><br /></p>

<hr />

<h2 id="references">References</h2>

<ul>
  <li><a href="https://airflow.apache.org/docs/apache-airflow/1.10.15/_api/airflow/operators/dagrun_operator/index.html?highlight=triggerdagrunoperator#airflow.operators.dagrun_operator.TriggerDagRunOperator">Airflow version1 : dagrun_operator.TriggerDagRunOperator</a></li>
  <li><a href="https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/operators/trigger_dagrun/index.html">Airflow version2 : trigger_dagrun.TriggerDagRunOperator</a></li>
</ul>
:ET