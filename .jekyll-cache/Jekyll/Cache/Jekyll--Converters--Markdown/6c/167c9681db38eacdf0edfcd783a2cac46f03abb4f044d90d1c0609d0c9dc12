I"=G<h4 id="contents">Contents</h4>
<ul>
  <li><a href="#applymap-메소드">applymap 메소드</a></li>
  <li><a href="#pipe-메소드">pipe 메소드</a></li>
</ul>

<p>이전 포스팅에 이어서 dataframe의 <code class="language-plaintext highlighter-rouge">applymap</code>과 <code class="language-plaintext highlighter-rouge">pipe</code>메소드에 대해서 정리하였습니다.</p>

<p><br /></p>

<hr />

<h2 id="applymap-메소드"><span style="color:navy">applymap 메소드<span></span></span></h2>

<p><code class="language-plaintext highlighter-rouge">applymap</code>은 <code class="language-plaintext highlighter-rouge">apply</code>와 비슷한 기능을 수행하는 함수이다. 하지만, <code class="language-plaintext highlighter-rouge">applymap</code>은 <code class="language-plaintext highlighter-rouge">apply</code>와 달리 <u>dataframe의 요소 별로  매핑 함수를 적용할 수 있다는 장점</u>이 있다.  (Apply a function to a Dataframe elementwise)</p>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">applymap</code>의 기본 format은 다음과 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">DataFrame</span> <span class="n">객체</span><span class="p">].</span><span class="n">applymap</span><span class="p">(</span><span class="n">mapping_func</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">mapping_func</code>
    <ul>
      <li><u>하나의 값으로 부터 하나의 결과 값을 리턴하는 함수</u></li>
      <li>따라서,  <code class="language-plaintext highlighter-rouge">applymap</code>메소드는 <code class="language-plaintext highlighter-rouge">apply</code>메소드와 달리 <u>집계 함수를 사용할 수 없다</u>.
  (물론, 기입은 할 수 있고 에러도 발생하지 않지만, 집계값이 반환되지 않는다.)</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p>다음은 DataFrame의 일부 요소들을 양수에서 음수로 변환하는 예제이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]],</span>
                  <span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="s">'row1'</span><span class="p">,</span> <span class="s">'row2'</span><span class="p">,</span> <span class="s">'row3'</span><span class="p">],</span>
                  <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'col1'</span><span class="p">,</span> <span class="s">'col2'</span><span class="p">,</span> <span class="s">'col3'</span><span class="p">])</span>

<span class="n">copy_df0</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
<span class="n">copy_df0</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">'row2'</span><span class="p">:</span><span class="s">'row3'</span><span class="p">,</span> <span class="s">'col2'</span><span class="p">:</span><span class="s">'col3'</span><span class="p">]</span> <span class="o">=</span> \
<span class="n">copy_df0</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">'row2'</span><span class="p">:</span><span class="s">'row3'</span><span class="p">,</span> <span class="s">'col2'</span><span class="p">:</span><span class="s">'col3'</span><span class="p">].</span><span class="n">applymap</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="o">-</span><span class="n">x</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">copy_df0</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      col1  col2  col3
row1     1     2     3
row2     5    -3    -2
row3     3    -4    -1
</code></pre></div></div>

<p><br /></p>

<p>그리고, 다음은 정수형 DataFrame 요소들을 실수로 변환하는 예제이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]],</span>
                  <span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="s">'row1'</span><span class="p">,</span> <span class="s">'row2'</span><span class="p">,</span> <span class="s">'row3'</span><span class="p">],</span>
                  <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'col1'</span><span class="p">,</span> <span class="s">'col2'</span><span class="p">,</span> <span class="s">'col3'</span><span class="p">])</span>

<span class="n">copy_df1</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
<span class="n">copy_df1</span> <span class="o">=</span> <span class="n">copy_df1</span><span class="p">.</span><span class="n">applymap</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">copy_df1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      col1  col2  col3
row1   1.0   2.0   3.0
row2   5.0   3.0   2.0
row3   3.0   4.0   1.0
</code></pre></div></div>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">applymap</code>은 <code class="language-plaintext highlighter-rouge">apply</code>와 달리 DataFrame의 집계에 사용하기 적합하지 않으며  주로 위의 예제에서 확인할 수 있듯이 <u>DataFrame의 요소를 변환(Transformation)하는데 적합</u>하다.</p>

<p>그리고, 아래의 예제에서 볼 수 있듯이  <u>두 메소드 모두 하나의 값을 반환하는 함수를 입력받을 경우에는 동일한 결과를 출력하는 것을 확인</u>할 수 있다. 이때, 주로 performance가 더 좋은 것은 <code class="language-plaintext highlighter-rouge">applymap</code>이지만, 데이터의 상황에 따라 다르므로 두 메소드를 모두 적용해보고 더 나은 메소드를 고르는 것을 추천한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]],</span>
                  <span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="s">'row1'</span><span class="p">,</span> <span class="s">'row2'</span><span class="p">,</span> <span class="s">'row3'</span><span class="p">],</span>
                  <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'col1'</span><span class="p">,</span> <span class="s">'col2'</span><span class="p">,</span> <span class="s">'col3'</span><span class="p">])</span>

<span class="n">func</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">x</span><span class="o">+</span><span class="mi">10</span>

<span class="n">result_df0</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nb">apply</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">result_df1</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">applymap</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">result_df0</span><span class="p">)</span>
<span class="k">print</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">result_df1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      col1  col2  col3
row1    11    12    13
row2    15    13    12
row3    13    14    11

      col1  col2  col3
row1    11    12    13
row2    15    13    12
row3    13    14    11
</code></pre></div></div>

<p><br /></p>

<hr />

<h2 id="pipe-메소드"><span style="color:navy">pipe 메소드<span></span></span></h2>

<p><code class="language-plaintext highlighter-rouge">pipe</code>메소드는 사용하는 <u>함수가 반환하는 리턴 값에 따라서 반환하는 객체의 종류가 결정</u>된다. DataFrame을 반환할 수 있고, Series를 반환할 수 있으며, 그리고 하나의 값을 반환할 수도 있다는 의미이다.</p>

<p>이렇게 범용적인 <code class="language-plaintext highlighter-rouge">pipe</code>메소드는 pandas의 <code class="language-plaintext highlighter-rouge">chainable function</code>이다. 즉, 해당 메소드를 이용하여 객체에 연속적으로 함수를 적용할 수 있다는 의미이다.</p>

<p><br /></p>

<p>다음은 <code class="language-plaintext highlighter-rouge">pipe</code>메소드의 기본 format이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span> <span class="n">DataFrame</span> <span class="n">객체</span> <span class="o">|</span> <span class="n">Series</span> <span class="n">객체</span> <span class="p">].</span><span class="n">pipe</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">func</code> : Series혹은 DataFrame에 적용가능한 함수를 받는다.</li>
  <li><code class="language-plaintext highlighter-rouge">*args</code> : func에 전달될 arguments를 받는다.</li>
  <li><code class="language-plaintext highlighter-rouge">**kwargs</code> : func에 전달될 keyword arguments를 전달 받는다.</li>
</ul>

<p><br /></p>

<p>아래는 <code class="language-plaintext highlighter-rouge">pipe</code>메소드를 이용하여 아이템 판매 로그에서 특정 판매 개수를 만족하는 아이템의 총 판매 금액을 반환하는 코드이다. 아래와 같이 사용하는 경우는 없겠지만 <code class="language-plaintext highlighter-rouge">pipe</code>를 이해하기 위한 예제이기에 어떻게 <code class="language-plaintext highlighter-rouge">pipe</code>를 사용하는지만 보도록 하자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 다음의 DataFrame은 판매 아이템에 대한 로그이며, 
# 각 column은 판매된 아이템의 이름, 개수, 그리고 아이템의 판매 총 가격을 의미한다.
</span><span class="n">df</span> <span class="o">=</span> \
<span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">([[</span><span class="s">'item A'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">20900</span><span class="p">],</span>
              <span class="p">[</span><span class="s">'item B'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3200</span><span class="p">],</span>
              <span class="p">[</span><span class="s">'item C'</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">100</span><span class="p">],</span>
              <span class="p">[</span><span class="s">'item D'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4000</span><span class="p">],</span>
              <span class="p">[</span><span class="s">'item E'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5000</span><span class="p">]],</span> <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'name'</span><span class="p">,</span> <span class="s">'cnt'</span><span class="p">,</span> <span class="s">'price'</span><span class="p">])</span>

<span class="c1"># 특정 판매 개수를 만족하는 아이템 판매 기록을 필터링한 DataFrame을 반환합니다.
</span><span class="k">def</span> <span class="nf">cnt_filter</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">a</span><span class="p">):</span>
    <span class="n">cond</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">cnt</span> <span class="o">==</span> <span class="n">a</span>
    <span class="n">filter_df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">cond</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">filter_df</span>

<span class="c1"># 아이템 가격을 Series로 반환합니다.
</span><span class="k">def</span> <span class="nf">get_sr</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">col_name</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">df</span><span class="p">[</span><span class="n">col_name</span><span class="p">]</span>

<span class="c1"># Series의 Value를 모두 더합니다.
</span><span class="k">def</span> <span class="nf">sum_val</span><span class="p">(</span><span class="n">sr</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">sr</span><span class="p">.</span><span class="nb">sum</span><span class="p">()</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">sum_val</span><span class="p">(</span><span class="n">get_sr</span><span class="p">(</span><span class="n">cnt_filter</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="s">'price'</span><span class="p">))</span> <span class="c1"># 일반
</span><span class="n">y</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">cnt_filter</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span><span class="n">pipe</span><span class="p">(</span><span class="n">get_sr</span><span class="p">,</span> <span class="s">'price'</span><span class="p">).</span><span class="n">pipe</span><span class="p">(</span><span class="n">sum_val</span><span class="p">)</span> <span class="c1"># pipe 이용
</span>
<span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>28100 28100
</code></pre></div></div>

<p>위에서 볼 수 있듯이 함수안에 객체를 넣어서 처리하는 방식보다 <code class="language-plaintext highlighter-rouge">pipe</code> 메소드를 이용하여 순차적으로 처리하는 방식이 더 직관적이고 알기 쉬움을 알 수 있다.</p>

<p><br /></p>

<hr />

<h2 id="references"><span style="color:navy">References<span></span></span></h2>

<ul>
  <li><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.applymap.html?highlight=applymap">pandas doc : pandas.DataFrame.applymap</a></li>
  <li><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pipe.html?highlight=pipe">pandas doc : pandas.DataFrame.pipe</a></li>
  <li><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.pipe.html?highlight=pipe#pandas.Series.pipe">pandas doc : pandas.Series.pipe</a></li>
  <li>오승환, 『파이썬 머신러닝 판다스 데이터 분석』, 정보문화사 (2019)</li>
</ul>
:ET